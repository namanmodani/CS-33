# CS 33 Homework 7
# Naman Modani

Problem 1

    In the given code, the variables and their respective registers are enlisted below.

    | Variable | Register |

         i         $s3
         j         $e4 
         r         $e6

    The corresponding C code for this MIPS code is:

    Loop:

        if (save[i]) != r, the go to Exit
        i = i + j;
        go to Loop;
        
        Exit:
            save[0]: 0
            save[1]: 0
            save[2]: 0
            save[3]: 0
            save[4]: 0
            save[5]: 0
            save[6]: 0 
            save[7]: 6
            save[8]: 3
            save[9]: 2

    Therefore, the output of the following MIPS code is: "\nThe value of i is: 7"

Problem 2

    E. jyix
    
    The most cache-friendly ordering is where the variables in the outermost loop are also the major indices of the 
    multidimensional arrays. Since memory reads here are primarily sequential, the cache blocks are kept active for 
    as long as required. 
    
    The most cache-unfriendly ordering is where the faster-changing iterators are the major indices 
    of the arrays. The memory reads here are all over the place, so cache blocks are brought into the working set and 
    evicted out of necessity. As a result, ton of time is wasted on cache transfer.

    This can also be done by first finding the best loop ordering, which is ixjy and then "reversing" each pair of indices 
    to get the answer.