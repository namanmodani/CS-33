# CS 33 Homework 8
# Naman Modani

Problem 1

    B

    void sumitup_par3() {
        int i, j, k;

        #pragma omp parallel num_threads(4)
        for (i = 0; i < DIM; i++) {
            #pragma omp for reduction(+:summation)
            for (j = 0; j < DIM; j++) {
                summation += bigarray[i][j];
                bigarray[i][j]++;
            }    
        }
    }

Problem 2

    C

    (x & 3) > 2

    The value in %eax is compared to 0x3 after which the loops either A. repeats or B. exits. Using this to locate the 
    assembly corresponding to the do-while loop: %eax at address 40051f holds the variable x, which then undergoes an & 
    operation with 0x3 and is placed in %eax again. (Since je is a cheaper operation, this constraint can be exploited 
    and rewritten in the form of equality in assembly.) Post that, x&3 is compared to 3. The & works like a mask, making 
    all but the last two bits 0 - which must be 11 for the loop to run. This condition is satisfied only when x&3 = 
    0, 1, 2 or 3.

Problem 3

    The programs jumps to here in iterations 1 through 4, before it branches to there. As a result, the value of $t0 
    after execution of the first lw instruction is 4, whereas the value of $t9 after execution of the last lw instruction
    is 1.